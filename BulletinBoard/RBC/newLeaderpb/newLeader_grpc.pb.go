// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: newLeader.proto

package newLeaderpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NewLeaderHandleClient is the client API for NewLeaderHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewLeaderHandleClient interface {
	// Handles a received newLeader message
	NewLeaderReceive(ctx context.Context, in *NewLeader, opts ...grpc.CallOption) (*NewLeaderResponse, error)
}

type newLeaderHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewNewLeaderHandleClient(cc grpc.ClientConnInterface) NewLeaderHandleClient {
	return &newLeaderHandleClient{cc}
}

func (c *newLeaderHandleClient) NewLeaderReceive(ctx context.Context, in *NewLeader, opts ...grpc.CallOption) (*NewLeaderResponse, error) {
	out := new(NewLeaderResponse)
	err := c.cc.Invoke(ctx, "/newLeaderpb.NewLeaderHandle/NewLeaderReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewLeaderHandleServer is the server API for NewLeaderHandle service.
// All implementations must embed UnimplementedNewLeaderHandleServer
// for forward compatibility
type NewLeaderHandleServer interface {
	// Handles a received newLeader message
	NewLeaderReceive(context.Context, *NewLeader) (*NewLeaderResponse, error)
	mustEmbedUnimplementedNewLeaderHandleServer()
}

// UnimplementedNewLeaderHandleServer must be embedded to have forward compatible implementations.
type UnimplementedNewLeaderHandleServer struct {
}

func (UnimplementedNewLeaderHandleServer) NewLeaderReceive(context.Context, *NewLeader) (*NewLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewLeaderReceive not implemented")
}
func (UnimplementedNewLeaderHandleServer) mustEmbedUnimplementedNewLeaderHandleServer() {}

// UnsafeNewLeaderHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewLeaderHandleServer will
// result in compilation errors.
type UnsafeNewLeaderHandleServer interface {
	mustEmbedUnimplementedNewLeaderHandleServer()
}

func RegisterNewLeaderHandleServer(s grpc.ServiceRegistrar, srv NewLeaderHandleServer) {
	s.RegisterService(&NewLeaderHandle_ServiceDesc, srv)
}

func _NewLeaderHandle_NewLeaderReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewLeaderHandleServer).NewLeaderReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/newLeaderpb.NewLeaderHandle/NewLeaderReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewLeaderHandleServer).NewLeaderReceive(ctx, req.(*NewLeader))
	}
	return interceptor(ctx, in, info, handler)
}

// NewLeaderHandle_ServiceDesc is the grpc.ServiceDesc for NewLeaderHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewLeaderHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "newLeaderpb.NewLeaderHandle",
	HandlerType: (*NewLeaderHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewLeaderReceive",
			Handler:    _NewLeaderHandle_NewLeaderReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "newLeader.proto",
}
