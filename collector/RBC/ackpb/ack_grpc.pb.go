// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: ack.proto

package ackpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AckHandleClient is the client API for AckHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AckHandleClient interface {
	// Handles a received ack message
	AckReceive(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*AckResponse, error)
}

type ackHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewAckHandleClient(cc grpc.ClientConnInterface) AckHandleClient {
	return &ackHandleClient{cc}
}

func (c *ackHandleClient) AckReceive(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/ackpb.AckHandle/AckReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AckHandleServer is the server API for AckHandle service.
// All implementations must embed UnimplementedAckHandleServer
// for forward compatibility
type AckHandleServer interface {
	// Handles a received ack message
	AckReceive(context.Context, *Ack) (*AckResponse, error)
	mustEmbedUnimplementedAckHandleServer()
}

// UnimplementedAckHandleServer must be embedded to have forward compatible implementations.
type UnimplementedAckHandleServer struct {
}

func (UnimplementedAckHandleServer) AckReceive(context.Context, *Ack) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckReceive not implemented")
}
func (UnimplementedAckHandleServer) mustEmbedUnimplementedAckHandleServer() {}

// UnsafeAckHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AckHandleServer will
// result in compilation errors.
type UnsafeAckHandleServer interface {
	mustEmbedUnimplementedAckHandleServer()
}

func RegisterAckHandleServer(s grpc.ServiceRegistrar, srv AckHandleServer) {
	s.RegisterService(&AckHandle_ServiceDesc, srv)
}

func _AckHandle_AckReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AckHandleServer).AckReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ackpb.AckHandle/AckReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AckHandleServer).AckReceive(ctx, req.(*Ack))
	}
	return interceptor(ctx, in, info, handler)
}

// AckHandle_ServiceDesc is the grpc.ServiceDesc for AckHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AckHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ackpb.AckHandle",
	HandlerType: (*AckHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AckReceive",
			Handler:    _AckHandle_AckReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ack.proto",
}
