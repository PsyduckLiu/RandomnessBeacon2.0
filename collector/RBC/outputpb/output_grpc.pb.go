// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: output.proto

package outputpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OutputHandleClient is the client API for OutputHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutputHandleClient interface {
	// Handles a received output message
	OutputReceive(ctx context.Context, in *Output, opts ...grpc.CallOption) (*OutputResponse, error)
}

type outputHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewOutputHandleClient(cc grpc.ClientConnInterface) OutputHandleClient {
	return &outputHandleClient{cc}
}

func (c *outputHandleClient) OutputReceive(ctx context.Context, in *Output, opts ...grpc.CallOption) (*OutputResponse, error) {
	out := new(OutputResponse)
	err := c.cc.Invoke(ctx, "/outputpb.OutputHandle/OutputReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutputHandleServer is the server API for OutputHandle service.
// All implementations must embed UnimplementedOutputHandleServer
// for forward compatibility
type OutputHandleServer interface {
	// Handles a received output message
	OutputReceive(context.Context, *Output) (*OutputResponse, error)
	mustEmbedUnimplementedOutputHandleServer()
}

// UnimplementedOutputHandleServer must be embedded to have forward compatible implementations.
type UnimplementedOutputHandleServer struct {
}

func (UnimplementedOutputHandleServer) OutputReceive(context.Context, *Output) (*OutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputReceive not implemented")
}
func (UnimplementedOutputHandleServer) mustEmbedUnimplementedOutputHandleServer() {}

// UnsafeOutputHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutputHandleServer will
// result in compilation errors.
type UnsafeOutputHandleServer interface {
	mustEmbedUnimplementedOutputHandleServer()
}

func RegisterOutputHandleServer(s grpc.ServiceRegistrar, srv OutputHandleServer) {
	s.RegisterService(&OutputHandle_ServiceDesc, srv)
}

func _OutputHandle_OutputReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Output)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutputHandleServer).OutputReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outputpb.OutputHandle/OutputReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutputHandleServer).OutputReceive(ctx, req.(*Output))
	}
	return interceptor(ctx, in, info, handler)
}

// OutputHandle_ServiceDesc is the grpc.ServiceDesc for OutputHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OutputHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "outputpb.OutputHandle",
	HandlerType: (*OutputHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OutputReceive",
			Handler:    _OutputHandle_OutputReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "output.proto",
}
