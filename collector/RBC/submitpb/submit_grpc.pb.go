// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: submit.proto

package submitpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubmitHandleClient is the client API for SubmitHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmitHandleClient interface {
	// Handles a received submit message
	SubmitReceive(ctx context.Context, in *Submit, opts ...grpc.CallOption) (*SubmitResponse, error)
}

type submitHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmitHandleClient(cc grpc.ClientConnInterface) SubmitHandleClient {
	return &submitHandleClient{cc}
}

func (c *submitHandleClient) SubmitReceive(ctx context.Context, in *Submit, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, "/submitpb.SubmitHandle/SubmitReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmitHandleServer is the server API for SubmitHandle service.
// All implementations must embed UnimplementedSubmitHandleServer
// for forward compatibility
type SubmitHandleServer interface {
	// Handles a received submit message
	SubmitReceive(context.Context, *Submit) (*SubmitResponse, error)
	mustEmbedUnimplementedSubmitHandleServer()
}

// UnimplementedSubmitHandleServer must be embedded to have forward compatible implementations.
type UnimplementedSubmitHandleServer struct {
}

func (UnimplementedSubmitHandleServer) SubmitReceive(context.Context, *Submit) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitReceive not implemented")
}
func (UnimplementedSubmitHandleServer) mustEmbedUnimplementedSubmitHandleServer() {}

// UnsafeSubmitHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmitHandleServer will
// result in compilation errors.
type UnsafeSubmitHandleServer interface {
	mustEmbedUnimplementedSubmitHandleServer()
}

func RegisterSubmitHandleServer(s grpc.ServiceRegistrar, srv SubmitHandleServer) {
	s.RegisterService(&SubmitHandle_ServiceDesc, srv)
}

func _SubmitHandle_SubmitReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Submit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmitHandleServer).SubmitReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submitpb.SubmitHandle/SubmitReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmitHandleServer).SubmitReceive(ctx, req.(*Submit))
	}
	return interceptor(ctx, in, info, handler)
}

// SubmitHandle_ServiceDesc is the grpc.ServiceDesc for SubmitHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmitHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "submitpb.SubmitHandle",
	HandlerType: (*SubmitHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitReceive",
			Handler:    _SubmitHandle_SubmitReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submit.proto",
}
