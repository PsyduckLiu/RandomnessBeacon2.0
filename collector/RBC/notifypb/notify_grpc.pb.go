// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: notify.proto

package notifypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifyHandleClient is the client API for NotifyHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyHandleClient interface {
	// Handles a received notify message
	NotifyReceive(ctx context.Context, in *Notify, opts ...grpc.CallOption) (*NotifyResponse, error)
}

type notifyHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyHandleClient(cc grpc.ClientConnInterface) NotifyHandleClient {
	return &notifyHandleClient{cc}
}

func (c *notifyHandleClient) NotifyReceive(ctx context.Context, in *Notify, opts ...grpc.CallOption) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, "/notifypb.notifyHandle/notifyReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyHandleServer is the server API for NotifyHandle service.
// All implementations must embed UnimplementedNotifyHandleServer
// for forward compatibility
type NotifyHandleServer interface {
	// Handles a received notify message
	NotifyReceive(context.Context, *Notify) (*NotifyResponse, error)
	mustEmbedUnimplementedNotifyHandleServer()
}

// UnimplementedNotifyHandleServer must be embedded to have forward compatible implementations.
type UnimplementedNotifyHandleServer struct {
}

func (UnimplementedNotifyHandleServer) NotifyReceive(context.Context, *Notify) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyReceive not implemented")
}
func (UnimplementedNotifyHandleServer) mustEmbedUnimplementedNotifyHandleServer() {}

// UnsafeNotifyHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyHandleServer will
// result in compilation errors.
type UnsafeNotifyHandleServer interface {
	mustEmbedUnimplementedNotifyHandleServer()
}

func RegisterNotifyHandleServer(s grpc.ServiceRegistrar, srv NotifyHandleServer) {
	s.RegisterService(&NotifyHandle_ServiceDesc, srv)
}

func _NotifyHandle_NotifyReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyHandleServer).NotifyReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifypb.notifyHandle/notifyReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyHandleServer).NotifyReceive(ctx, req.(*Notify))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifyHandle_ServiceDesc is the grpc.ServiceDesc for NotifyHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifyHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifypb.notifyHandle",
	HandlerType: (*NotifyHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "notifyReceive",
			Handler:    _NotifyHandle_NotifyReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notify.proto",
}
